//find first and last occurance of x in an arry 
// time complexity is (logn)

vector<int> searchRange(vector<int>& a, int x) {
		int n = a.size();
		int f = -1, s = -1;
		int l = 0, m, r = n - 1;

// finding the first index
		while (l <= r)
		{
			m = (l + r) / 2;
			if (a[m] == x)
			{
				f = m;
				r = m - 1;
			}
			else if (a[m] < x)
				l = m + 1;
			else
				r = m - 1;
		}

// finding the second index
		l = 0, r = n - 1;
		while (l <= r)
		{
			m = (l + r) / 2;
			if (a[m] == x)
			{
				s = m;
				l = m + 1;
			}
			else if (a[m] < x)
				l = m + 1;
			else
				r = m - 1;
		}
		return vector<int>({f, s});
	}
###########################
q2) find the pivoted element 
class Solution {
public:
    int pivotIndex(vector<int>& a) {
        int n = a.size() ;
        int left=0 ; 
        int right=0 ; 
        int sum =0 ; 
        for(int i=0 ; i<n ; i++){
            sum = sum +a[i] ; 
        }
        bool test =false ; 
        int ans =0 ; 
        for(int i=0 ; i<n ; i++){
            right = sum-(left+a[i]) ;
            if(right ==left){
                ans =ans+ i ; 
                test= true ;
                break;
            }
            // ans=2;
            left=left+a[i] ; 
        }
        if(test == true ){
            return ans ;
        }else 
            return -1;
        
    }
};

#######################################################
// 1277. Count Square Submatrices with All Ones
class Solution {
public:
	int countSquares(vector<vector<int>>& M) {
		int r = 0;
		for (int i = 0; i < M.size(); ++i) //all rows
			for (int j = 0; j < M[i].size(); ++j) { // all columns
				if (i and j and M[i][j]) // exclude first row/col and zeros
					M[i][j] = min(M[i - 1][j - 1], min(M[i - 1][j], M[i][j - 1])) + 1; // find max size of square at this corner by looking one step backwards
				r += M[i][j]; // add number of squares (max size) at this corner
			}
		return r;
	}
};

#############################################
// 169. Majority Element
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n = nums.size() ;
        map<int, int> counter;   // hash map le liya hain . hash mep me surat me sare elemet zero hote hain

        for (int i = 0 ; i < nums.size(); i++) {
            counter[nums[i]]++;//or counter[nums[i]]= counter[mums[i]]+1 ;
            if (counter[nums[i]] > n / 2)
                return nums[i] ;
        }
        return 0 ;
    }
};

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
// 15. 3Sum
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& num) {
        vector<vector<int> > res;

        sort(num.begin(), num.end());

        for (int i = 0; i < num.size(); i++) {

            int target = -num[i]; // hame jo bhi nusm[i] hoga usko change kar denge kunki aage sab increasing hain
            int front = i + 1;      // thod sa soch hame -ve jo bhi ayega  wwo ad hote jayeha ahr 0 ke barabar aat hain too
            // wo apna  answer hain otherwise answer  nahi hain
            int back = num.size() - 1;

            while (front < back) {

                int sum = num[front] + num[back];

                // Finding answer which start from number num[i]
                if (sum < target)
                    front++;

                else if (sum > target)
                    back--;

                else {
                    vector<int> triplet = {num[i], num[front], num[back]};
                    res.push_back(triplet);

                    // Processing duplicates of Number 2
                    // Rolling the front pointer to the next different number forwards
                    while (front < back && num[front] == triplet[1]) front++;

                    // Processing duplicates of Number 3
                    // Rolling the back pointer to the next different number backwards
                    while (front < back && num[back] == triplet[2]) back--;
                }

            }

            // Processing duplicates of Number 1
            while (i + 1 < num.size() && num[i + 1] == num[i])
                i++;
        }

        return res;
    }
};

#######################################################################
// 532. K-diff Pairs in an Array
class Solution {
public:
	int findPairs(vector<int>& nums, int k) {
		if (k < 0) {
			return 0;
		}
		int n = nums.size() ;
		set<int> starter ;
		unordered_map<int, int> indecies ;  // ye agra num[i] lo map karega aur ingement by 1 kar dega
		for (int i = 0 ; i < n ; i++) {
			// hame mod value pucha hain to ek bar nums[i]+k chek kearenge
			// aur ek bar nums[i]-k  ko ncheck karenege

			if (indecies.count(nums[i] - k)) {
				starter.insert(nums[i] - k);
			}
			if (indecies.count(nums[i] + k)) {  // similarly for nums[i]+k ;
				starter.insert(nums[i]);
			}
			indecies[nums[i]]++ ;   // yaha iuncrement kar diya hain
		}
		return starter.size() ;

	}
};
########################################################################
// 88. Merge two  Sorted Array
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i = m - 1, j = n - 1, k = m + n - 1;
        while (i >= 0 && j >= 0)
        {
            if (nums1[i] > nums2[j])
            {
                nums1[k] = nums1[i];
                i--;
                k--;
            }
            else
            {
                nums1[k] = nums2[j];
                j--;
                k--;
            }
        }
        while (i >= 0)
            nums1[k--] = nums1[i--];
        while (j >= 0)
            nums1[k--] = nums2[j--];
    }
};


METHOD 2 BY GEEKFOR GEEKS 
// C++ program to merge two sorted
//  arrays with O(1) extra space.
#include <bits/stdc++.h>
using namespace std;

// Merge ar1[] and ar2[] with O(1) extra space
void merge(int ar1[], int ar2[], int m, int n)
{
    // Iterate through all elements 
    // of ar2[] starting from the last element
    for (int i = n - 1; i >= 0; i--) 
    {
        /* Find the smallest element greater than ar2[i].
        Move all elements one position ahead till the
        smallest greater element is not found */
        int j, last = ar1[m - 1];
        for (j = m - 2; j >= 0 
             && ar1[j] > ar2[i]; j--)
            ar1[j + 1] = ar1[j];

        // If there was a greater element
        if (j != m - 2 || last > ar2[i]) 
        {
            ar1[j + 1] = ar2[i];
            ar2[i] = last;
        }
    }
}

// Driver program
int main()
{
    int ar1[] = { 1, 5, 9, 10, 15, 20 };
    int ar2[] = { 2, 3, 8, 13 };
    int m = sizeof(ar1) / sizeof(ar1[0]);
    int n = sizeof(ar2) / sizeof(ar2[0]);
    merge(ar1, ar2, m, n);

    cout << "After Merging nFirst Array: ";
    for (int i = 0; i < m; i++)
        cout << ar1[i] << " ";
    cout << "nSecond Array: ";
    for (int i = 0; i < n; i++)
        cout << ar2[i] << " ";
    return 0;
}

**********for more method of merging twwo sorted array seen this
 https://www.geeksforgeeks.org/efficiently-merging-two-sorted-arrays-with-o1-extra-space/

#################################################

