 1)  dfs   

#include<iostream>
#include  <map>
#include <list>
#include<queue>
using namespace std;
class Graph {
public:    // list lo ya vector lo dono same hain
	map<int, list<int> > l; // l map lisys jaha  ek int ek list ko map kar raha hain

	void addedge(int x, int y ) {
		l[x].push_back(y);
		l[y].push_back(x);  // yaha l  map me push kar diya

	}

	void dfshelper(int src, map<int , bool>&visited) {  // yaha bass by referanse kiya jain visted ko

		cout << src << " ";
		visited[src] = true ;   // yaha visited[src] ko true kar do yah imp stap hain


		for (auto p : l[src]) { // src se jitne phi connected hain unke liye dfshelper ko call kar do
			if (!visited[p]) {
				// visited[p] = true ;
				dfshelper(p, visited);
			}
		}

	}

	void dfs(int src) {
		map<int , bool > visited ;

		for (auto nbr : l) {
			int x = nbr.first ;   // yaha hamne sare node ko false se initalise kar diya
			visited[x] = false ;
		}

		dfshelper(src, visited);  // yaha src ko pass kar diya

	}
};

int main() {
	Graph g ;
	g.addedge(0, 1);
	g.addedge(0, 3);
	g.addedge(1, 2);
	g.addedge(2, 3);
	g.addedge(3, 4);
	g.addedge(4, 5);
	g.addedge(5, 6);
	g.addedge(0, 7);

	g.dfs(0);

// o/p 0 1 2 3 4 5 6 7

	return 0;
}

####################################################
  BFS 
// bst (breath first travesal) ko hum lwvel order traversal bolte hain
#include<iostream>
#include<map>
#include<queue>
#include <list>
using namespace std;

class Graph {
public:
    std::map<int, list<int>> l;

    void add(int x , int y ) {
        l[x].push_back(y);
        l[y].push_back(x);
    }

    void bfs(int src)
    {
        map<int , bool > visted ;
        queue<int > q ;
        q.push(src);
        visted[src] = true;


        while (!q.empty()) {
            int node = q.front();
            q.pop();
            cout << node << " " ;
            for (int  nbr : l[node]) { // nbr is not visisted
                if (!visted[nbr]) {
                    q.push(nbr);
                    visted[nbr] = true;

                }
            }
        }
    }

};

int main() {
    Graph g ;
    g.add(0, 1);
    g.add(0, 3);
    g.add(1, 2);
    g.add(2, 3);
    g.add(2, 9);
    g.add(3, 4);
    g.add(4, 5);

    g.bfs(0);

// o/p 0 1 3 2 4 9 5
    return 0;
}
####################################################
Q ) FLOD FILL ALGO 
#include <bits/stdc++.h>
using namespace std;
#define N 8
#define M 8
void floodFill(int screen[][M] , int x , int y , int newC , int prevc ){
	
	if(x<0||x>=N||y<0 ||y>=M){  //agar  x ya y  ka value 0 se chota ya n or m se 
		return ;              // jyda aata hain to return kar do 
	}
	if(screen[x][y]!=prevc)  // agar screen[x][y] prev se match nahi karta hain tab bahi retrn kar do 
		return ;
	if(screen[x][y]=prevc){  // gar match karta hain to simplyb change kar do 
		screen[x][y]=newC;
	}	
	floodFill(screen , x-1 ,  y , newC , prevc); 
	floodFill(screen , x+1 ,  y , newC , prevc);  //yaha caharo direction me move kiya 
	floodFill(screen , x ,  y -1, newC , prevc);   // hain    ..  
	floodFill(screen , x,  y+1 , newC , prevc); 
}

int main(){

    int screen[M][N] = {{1, 1, 1, 1, 1, 1, 1, 1},
                      {1, 1, 1, 1, 1, 1, 0, 0},
                      {1, 0, 0, 1, 1, 0, 1, 1},
                      {1, 2, 2, 2, 2, 0, 1, 0},
                      {1, 1, 1, 2, 2, 0, 1, 0},
                      {1, 1, 1, 2, 2, 2, 2, 0},
                      {1, 1, 1, 1, 1, 2, 1, 1},
                      {1, 1, 1, 1, 1, 2, 2, 1},
                     };
    int x = 4, y = 4, newC = 3;
    int prevc = screen[x-1][y-1];
    floodFill(screen, x, y, newC , prevc);
 
    cout << "Updated screen after call to floodFill: \n";
    for (int i=0; i<M; i++)
    {
        for (int j=0; j<N; j++)
           cout << screen[i][j] << " ";
        cout << endl;

     }

	return 0 ; 
}
###################################
class Graph {
public:
	map<int, list<int> > l; // l map lisys jaha  ek int ek list ko map kar raha hain
	void addedge(int x, int y ) {
		l[x].push_back(y);
		// l[y].push_back(x);  // yaha l  map me push kar diya

	}

	void dfshelper(int src, map<int , bool>visited) {

		// cout<<src<<" ";

		if (!(visited[src])) { // agar visited nahi hain to visted[src] ko tru kar do aur o/p likh do
			visited[src] = true;
			// cout<<src<<" ";
			for (auto p : l[src]) { // src se jitne phi connected hain unke liye dfshelper ko call kar do
				if (visited[p] == true) {
					cout << "yes" << " "; //yaha chek kiya hain kahi p pahle visted to nahi
				}                  // hua hain agar hua hain  iska matlab yah hain ki cycle ban ragha hain
				dfshelper(p, visited);

			}

		}

	}

	void dfs(int src) {
		// map<int ,int> l;
		// int node = l.first;
		map<int , bool > visited ;
		// queue<int> q;
		// q.push(src) ;
		visited[src] = false; // yaha src ko false kar diya  hain


		dfshelper(src, visited);

	}
};

int main() {
	Graph g ;
	//g.addedge(0,1);
	//  g.addedge(0,7);
	g.addedge(0, 3);
	g.addedge(1, 2);
	g.addedge(2, 3);
	g.addedge(3, 4);
	g.addedge(4, 5);
	g.addedge(5, 6);
	g.addedge(6, 0);
	g.addedge(0, 7);
	g.dfs(0);
	return 0;
}
#######################################3
TRAVELLING SALSEMAN PROBLEM 














############################
FLOYAD ALGO 





















#####################

PRIMS ALGO 











###########
KRUSKAL ALGO 







################3
 // folder se KUCH QUESTION YAH COPY KARNA HAIN 




#################################################3


   SHEET FROM LEETCODE PROBLEM 

1319. Number of Operations to Make Network Connected
class Solution {
public:
	void dfs(vector<vector<int>> &adj , int source , vector<bool> &visisted) {
		visisted[source] = true ;

		for (auto i : adj[source]) {
			if (!visisted[i]) {
				dfs(adj , i , visisted) ;
			}
		}
	}
	int makeConnected(int n, vector<vector<int>>& connections) {
		if (connections.size() < n - 1)
			return -1 ;

		vector<vector<int>> adj(n) ;
		int required_conection = 0 ;

		for (auto v : connections) {   // adj matrix  me convert kar diya hain
			adj[v[0]].push_back(v[1]) ;
			adj[v[1]].push_back(v[0]) ;
		}

		vector<bool> visisted(n , false ) ;

		for (int i = 0 ; i < n ; i++) {   // depth search laga do
			if (!visisted[i]) {
				dfs(adj , i , visisted) ;
				required_conection ++ ;
			}
		}

		return required_conection - 1 ; // ek kam hoga ek example ko solve kar ke dek samjh aa jayega
	}
};

####################################################3333






